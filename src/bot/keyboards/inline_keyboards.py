from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List
from ...data.models import Program, Course, ProgramType

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É",
        callback_data="select_program"
    ))
    builder.add(InlineKeyboardButton(
        text="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        callback_data="get_recommendations"
    ))
    builder.add(InlineKeyboardButton(
        text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
        callback_data="qa_mode"
    ))
    builder.add(InlineKeyboardButton(
        text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
        callback_data="view_profile"
    ))
    
    builder.adjust(2, 2)
    return builder.as_markup()

def get_programs_keyboard(programs: List[Program]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    for program in programs:
        builder.add(InlineKeyboardButton(
            text=program.name,
            callback_data=f"program_{program.id}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_main"
    ))
    
    builder.adjust(1)
    return builder.as_markup()

def get_profile_setup_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="–£–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
        callback_data="set_background"
    ))
    builder.add(InlineKeyboardButton(
        text="–£–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã",
        callback_data="set_interests"
    ))
    builder.add(InlineKeyboardButton(
        text="–£–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏",
        callback_data="set_goals"
    ))
    builder.add(InlineKeyboardButton(
        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        callback_data="skip_profile"
    ))
    
    builder.adjust(2, 2)
    return builder.as_markup()

def get_interests_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    interests = [
        ("–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "ml"),
        ("–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ", "cv"),
        ("NLP", "nlp"),
        ("–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞", "robotics"),
        ("–ü—Ä–æ–¥—É–∫—Ç—ã", "products"),
        ("–î–∞–Ω–Ω—ã–µ", "data"),
        ("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "research"),
        ("–°—Ç–∞—Ä—Ç–∞–ø—ã", "startup"),
        ("–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "web"),
        ("–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "mobile"),
        ("–ò–≥—Ä–æ–≤–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "gamedev"),
        ("–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "security"),
        ("–ë–ª–æ–∫—á–µ–π–Ω", "blockchain"),
        ("IoT", "iot"),
        ("AR/VR", "arvr"),
        ("DevOps", "devops"),
        ("UI/UX –¥–∏–∑–∞–π–Ω", "design"),
        ("–ë–∏–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "bioinformatics")
    ]
    
    for interest_text, interest_code in interests:
        builder.add(InlineKeyboardButton(
            text=interest_text,
            callback_data=f"int_{interest_code}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="–ì–æ—Ç–æ–≤–æ",
        callback_data="int_done"
    ))
    
    builder.adjust(2)
    return builder.as_markup()

def get_goals_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    goals = [
        ("–ö–∞—Ä—å–µ—Ä–∞ –≤ IT", "career"),
        ("–ù–∞—É–∫–∞", "science"),
        ("–°—Ç–∞—Ä—Ç–∞–ø", "startup"),
        ("–°–º–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", "change"),
        ("–£–≥–ª—É–±–∏—Ç—å –∑–Ω–∞–Ω–∏—è", "knowledge"),
        ("–ü–æ–ª—É—á–∏—Ç—å –¥–∏–ø–ª–æ–º", "diploma")
    ]
    
    for goal_text, goal_code in goals:
        builder.add(InlineKeyboardButton(
            text=goal_text,
            callback_data=f"goal_{goal_code}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="–ì–æ—Ç–æ–≤–æ",
        callback_data="goal_done"
    ))
    
    builder.adjust(2)
    return builder.as_markup()

def get_courses_keyboard(courses: List[Course], page: int = 0, program_id: str = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è - –ø–æ 5 –∫—É—Ä—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    courses_per_page = 5
    start_idx = page * courses_per_page
    end_idx = start_idx + courses_per_page
    page_courses = courses[start_idx:end_idx]
    
    for course in page_courses:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫—É—Ä—Å–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        course_type = "–û–±—è–∑." if not course.is_elective else "–í—ã–±–æ—Ä."
        builder.add(InlineKeyboardButton(
            text=f"{course_type} {course.name} ({course.credits} –∫—Ä., —Å–µ–º. {course.semester})",
            callback_data=f"course_{course.id}"
        ))
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=f"courses_page_{page-1}_{program_id}"))
    if end_idx < len(courses):
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=f"courses_page_{page+1}_{program_id}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder.add(InlineKeyboardButton(
        text="üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É",
        callback_data=f"download_program_{program_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="back_to_main"
    ))
    
    builder.adjust(1, 2, 1, 1)
    return builder.as_markup()

def get_export_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="–°–∫–∞—á–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç",
        callback_data="export_text"
    ))
    builder.add(InlineKeyboardButton(
        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç",
        callback_data="export_message"
    ))
    builder.add(InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data="back_to_main"
    ))
    
    builder.adjust(2, 1)
    return builder.as_markup()

def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="–î–∞",
        callback_data="confirm_yes"
    ))
    builder.add(InlineKeyboardButton(
        text="–ù–µ—Ç",
        callback_data="confirm_no"
    ))
    
    builder.adjust(2)
    return builder.as_markup()

def get_menu_button_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '–ú–µ–Ω—é'"""
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="üì± –ú–µ–Ω—é",
        callback_data="back_to_main"
    ))
    
    return builder.as_markup()

def get_program_actions_keyboard(program_id: str = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –±–µ–∑ –ø–æ–∫–∞–∑–∞ –∫—É—Ä—Å–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    if program_id:
        builder.add(InlineKeyboardButton(
            text="üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É",
            callback_data=f"download_program_{program_id}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="back_to_main"
    ))
    
    builder.adjust(1)
    return builder.as_markup() 