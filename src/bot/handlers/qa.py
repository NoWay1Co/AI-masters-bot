from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from typing import List

from ..states.user_states import UserStates
from ..keyboards.inline_keyboards import get_main_menu_keyboard, get_menu_button_keyboard
from ...services.llm_service import llm_service
from ...data.json_storage import storage
from ...utils.logger import logger

router = Router()

@router.callback_query(F.data == "qa_mode")
async def enter_qa_mode(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        """
–†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ò–¢–ú–û –ø–æ –ò–ò.

–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu
        """,
        reply_markup=None
    )
    
    await state.set_state(UserStates.QA_MODE)
    await callback.answer()

@router.message(UserStates.QA_MODE)
async def process_question(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    question = message.text.strip()
    
    if question.lower() in ['/menu', '–º–µ–Ω—é', '–Ω–∞–∑–∞–¥']:
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.set_state(UserStates.MAIN_MENU)
        return
    
    if len(question) < 5:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å.",
            reply_markup=get_menu_button_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
    if not _is_relevant_question(question):
        await message.answer(
            "–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ò–¢–ú–û –ø–æ –ò–ò.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π.",
            reply_markup=get_menu_button_keyboard()
        )
        logger.info("Irrelevant question filtered", user_id=user_id, question=question[:50])
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    processing_msg = await message.answer(
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        reply_markup=get_menu_button_keyboard()
    )
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        user_profile = await storage.load_user_profile(user_id)
        programs = await storage.load_programs()
        
        # –°—Ç—Ä–æ–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = _build_personalized_context(programs, user_profile)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM
        answer = await llm_service.answer_question(question, context)
        
        if answer:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
            if len(answer) > 4000:
                answer = answer[:4000] + "...\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É."
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..."
            await processing_msg.delete()
            
            await message.answer(
                f"üí° **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:**\n\n{answer}\n\n"
                "‚ùì –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã? –ó–∞–¥–∞–≤–∞–π—Ç–µ!",
                reply_markup=get_menu_button_keyboard(),
                parse_mode="Markdown"
            )
            
            logger.info("Question answered via LLM", user_id=user_id, question_length=len(question))
        else:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..."
            await processing_msg.delete()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fallback –æ—Ç–≤–µ—Ç
            fallback_answer = _generate_personalized_fallback_answer(question, programs, user_profile)
            await message.answer(
                fallback_answer,
                reply_markup=get_menu_button_keyboard(),
                parse_mode="Markdown"
            )
            
            logger.warning("Used fallback answer", user_id=user_id, question=question[:50])
    
    except Exception as e:
        logger.error("Error in Q&A processing", user_id=user_id, error=str(e))
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..." –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        try:
            await processing_msg.delete()
        except:
            pass
            
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_menu_button_keyboard()
        )

def _filter_relevant_courses(programs, user_profile):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∫—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user_profile or not user_profile.interests:
        return programs
    
    user_interests = [interest.lower() for interest in user_profile.interests]
    
    filtered_programs = []
    for program in programs:
        relevant_courses = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
        mandatory_courses = [course for course in program.courses if not course.is_elective]
        relevant_courses.extend(mandatory_courses)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–±–æ—Ä–æ—á–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
        elective_courses = [course for course in program.courses if course.is_elective]
        for course in elective_courses:
            course_name_lower = course.name.lower()
            for interest in user_interests:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                interest_words = interest.split()
                if any(word in course_name_lower for word in interest_words if len(word) > 2):
                    relevant_courses.append(course)
                    break
        
        # –ï—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ
        if len([c for c in relevant_courses if c.is_elective]) < 3:
            remaining_electives = [c for c in elective_courses if c not in relevant_courses][:3]
            relevant_courses.extend(remaining_electives)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏
        filtered_program = program.model_copy()
        filtered_program.courses = relevant_courses
        filtered_programs.append(filtered_program)
    
    return filtered_programs

def _build_personalized_context(programs, user_profile):
    """–°—Ç—Ä–æ–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not programs:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
    relevant_programs = _filter_relevant_courses(programs, user_profile)
    
    context = ""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_profile:
        context += "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        if user_profile.background:
            context += f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ/–æ–ø—ã—Ç: {user_profile.background}\n"
        if user_profile.interests:
            context += f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_profile.interests)}\n"
        if user_profile.goals:
            context += f"–¶–µ–ª–∏: {', '.join(user_profile.goals)}\n"
        context += "\n"
    
    context += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ò–¢–ú–û:\n\n"
    
    for program in relevant_programs:
        context += f"–ü—Ä–æ–≥—Ä–∞–º–º–∞: {program.name}\n"
        context += f"–û–ø–∏—Å–∞–Ω–∏–µ: {program.description or '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –ò–ò'}\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –ø–æ —Ç–∏–ø—É
        mandatory_courses = [c for c in program.courses if not c.is_elective]
        elective_courses = [c for c in program.courses if c.is_elective]
        
        if mandatory_courses:
            context += f"\n–û—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã ({len(mandatory_courses)}):\n"
            for course in mandatory_courses[:8]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                context += f"- {course.name} ({course.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤, {course.semester} —Å–µ–º–µ—Å—Ç—Ä)\n"
        
        if elective_courses:
            context += f"\n–í—ã–±–æ—Ä–æ—á–Ω—ã–µ –∫—É—Ä—Å—ã (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, {len(elective_courses)}):\n"
            for course in elective_courses[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                context += f"- {course.name} ({course.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤, {course.semester} —Å–µ–º–µ—Å—Ç—Ä)\n"
        
        context += f"\n–í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {len(program.courses)}, –∫—Ä–µ–¥–∏—Ç–æ–≤: {program.total_credits}\n\n"
    
    return context

def _is_relevant_question(question: str) -> bool:
    question_lower = question.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
    relevant_keywords = [
        '–º–∞–≥–∏—Å—Ç—Ä', '–æ–±—É—á–µ–Ω–∏–µ', '–∫—É—Ä—Å', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω', '—Å–µ–º–µ—Å—Ç—Ä', '–∫—Ä–µ–¥–∏—Ç',
        '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–∏—Ç–º–æ', '–∏–∏', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
        '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏', 'data science', '–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
        '—É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω', '–ø—Ä–∞–∫—Ç–∏–∫–∞', '–¥–∏–ø–ª–æ–º', '—ç–∫–∑–∞–º–µ–Ω', '–∑–∞—á–µ—Ç',
        '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ª–µ–∫—Ü–∏—è', '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è', '–ø—Ä–æ–µ–∫—Ç', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'
    ]
    
    # –ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–º—ã
    irrelevant_keywords = [
        '–ø–æ–≥–æ–¥–∞', '–Ω–æ–≤–æ—Å—Ç–∏', '—Å–ø–æ—Ä—Ç', '–ø–æ–ª–∏—Ç–∏–∫–∞', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        '—Ñ–∏–ª—å–º', '–º—É–∑—ã–∫–∞', '–∏–≥—Ä–∞', '–≥–æ—Ç–æ–≤–∫–∞', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for keyword in irrelevant_keywords:
        if keyword in question_lower:
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for keyword in relevant_keywords:
        if keyword in question_lower:
            return True
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤, —Å—á–∏—Ç–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º
    return True

def _build_context_from_programs(programs) -> str:
    if not programs:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    context = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ò–¢–ú–û:\n\n"
    
    for program in programs:
        context += f"–ü—Ä–æ–≥—Ä–∞–º–º–∞: {program.name}\n"
        context += f"–û–ø–∏—Å–∞–Ω–∏–µ: {program.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}\n"
        context += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤: {len(program.courses)}\n"
        context += f"–û–±—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã: {program.total_credits}\n"
        context += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {program.duration_semesters} —Å–µ–º–µ—Å—Ç—Ä–æ–≤\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ–≤—ã—Ö –∫—É—Ä—Å–∞—Ö
        key_courses = [course for course in program.courses if not course.is_elective][:5]
        if key_courses:
            context += "–û—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã:\n"
            for course in key_courses:
                context += f"- {course.name} ({course.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤)\n"
        
        context += "\n"
    
    return context 

def _generate_personalized_fallback_answer(question: str, programs: list, user_profile) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fallback –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user_profile:
        return """
üòä –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –¥–∞—Ç—å —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.
        
–í–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å - —Ç–æ–≥–¥–∞ —è —Å–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫—É—Ä—Å—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–º–µ–Ω–Ω–æ –ø–æ–¥ —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã!
        """
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    relevant_programs = _filter_relevant_courses(programs, user_profile)
    
    return f"""
üòä **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Ç–µ–±—è:**

–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:
‚Ä¢ **–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:** {user_profile.background or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ **–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(user_profile.interests) if user_profile.interests else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
‚Ä¢ **–¶–µ–ª–∏:** {', '.join(user_profile.goals) if user_profile.goals else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

{_get_personalized_programs_summary(relevant_programs, user_profile)}

üí° **–†–µ–∫–æ–º–µ–Ω–¥—É—é:**
‚Ä¢ –ò–∑—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º

‚ùì –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!
    """.strip()

def _get_personalized_programs_summary(programs: list, user_profile) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö"""
    if not programs:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    summary = "**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Ç–µ–±—è:**\n\n"
    for program in programs:
        summary += f"**{program.name}**\n"
        summary += f"‚Ä¢ {program.description or '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –ò–ò'}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
        relevant_electives = [c for c in program.courses if c.is_elective][:3]
        if relevant_electives:
            summary += f"‚Ä¢ **–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã:** {', '.join([c.name for c in relevant_electives])}\n"
        
        summary += f"‚Ä¢ **–í—Å–µ–≥–æ:** {len(program.courses)} –∫—É—Ä—Å–æ–≤, {program.total_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
    
    return summary

def _get_programs_summary(programs: list) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö"""
    if not programs:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    summary = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n"
    for program in programs:
        summary += f"‚Ä¢ **{program.name}** - {program.description or '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –ò–ò'}\n"
        summary += f"  ‚îî {len(program.courses)} –∫—É—Ä—Å–æ–≤, {program.total_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
    
    return summary 