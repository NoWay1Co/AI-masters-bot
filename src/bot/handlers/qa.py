from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from typing import List

from ..states.user_states import UserStates
from ..keyboards.inline_keyboards import get_main_menu_keyboard, get_menu_button_keyboard
from ...services.llm_service import llm_service
from ...data.json_storage import storage
from ...utils.logger import logger

router = Router()

@router.callback_query(F.data == "qa_mode")
async def enter_qa_mode(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        """
–†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ò–¢–ú–û –ø–æ –ò–ò.

–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu
        """,
        reply_markup=None
    )
    
    await state.set_state(UserStates.QA_MODE)
    await callback.answer()

@router.message(UserStates.QA_MODE)
async def process_question(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    question = message.text.strip()
    
    if question.lower() in ['/menu', '–º–µ–Ω—é', '–Ω–∞–∑–∞–¥']:
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.set_state(UserStates.MAIN_MENU)
        return
    
    if len(question) < 5:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å.",
            reply_markup=get_menu_button_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
    if not _is_relevant_question(question):
        await message.answer(
            "–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ò–¢–ú–û –ø–æ –ò–ò.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π.",
            reply_markup=get_menu_button_keyboard()
        )
        logger.info("Irrelevant question filtered", user_id=user_id, question=question[:50])
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    processing_msg = await message.answer(
        "üîç –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        reply_markup=get_menu_button_keyboard()
    )
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
        programs = await storage.load_programs()
        context = _build_context_from_programs(programs)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM
        answer = await llm_service.answer_question(question, context)
        
        if answer:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
            if len(answer) > 4000:
                answer = answer[:4000] + "...\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É."
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..."
            await processing_msg.delete()
            
            await message.answer(
                f"üí° **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:**\n\n{answer}\n\n"
                "‚ùì –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã? –ó–∞–¥–∞–≤–∞–π—Ç–µ!",
                reply_markup=get_menu_button_keyboard(),
                parse_mode="Markdown"
            )
            
            logger.info("Question answered via LLM", user_id=user_id, question_length=len(question))
        else:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..."
            await processing_msg.delete()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π fallback –æ—Ç–≤–µ—Ç
            fallback_answer = _generate_fallback_answer(question, programs)
            await message.answer(
                fallback_answer,
                reply_markup=get_menu_button_keyboard()
            )
            
            logger.warning("Used fallback answer", user_id=user_id, question=question[:50])
    
    except Exception as e:
        logger.error("Error in Q&A processing", user_id=user_id, error=str(e))
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..." –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        try:
            await processing_msg.delete()
        except:
            pass
            
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_menu_button_keyboard()
        )

def _is_relevant_question(question: str) -> bool:
    question_lower = question.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
    relevant_keywords = [
        '–º–∞–≥–∏—Å—Ç—Ä', '–æ–±—É—á–µ–Ω–∏–µ', '–∫—É—Ä—Å', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω', '—Å–µ–º–µ—Å—Ç—Ä', '–∫—Ä–µ–¥–∏—Ç',
        '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–∏—Ç–º–æ', '–∏–∏', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
        '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏', 'data science', '–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
        '—É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω', '–ø—Ä–∞–∫—Ç–∏–∫–∞', '–¥–∏–ø–ª–æ–º', '—ç–∫–∑–∞–º–µ–Ω', '–∑–∞—á–µ—Ç',
        '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ª–µ–∫—Ü–∏—è', '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è', '–ø—Ä–æ–µ–∫—Ç', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'
    ]
    
    # –ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–º—ã
    irrelevant_keywords = [
        '–ø–æ–≥–æ–¥–∞', '–Ω–æ–≤–æ—Å—Ç–∏', '—Å–ø–æ—Ä—Ç', '–ø–æ–ª–∏—Ç–∏–∫–∞', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        '—Ñ–∏–ª—å–º', '–º—É–∑—ã–∫–∞', '–∏–≥—Ä–∞', '–≥–æ—Ç–æ–≤–∫–∞', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for keyword in irrelevant_keywords:
        if keyword in question_lower:
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for keyword in relevant_keywords:
        if keyword in question_lower:
            return True
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤, —Å—á–∏—Ç–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º
    return True

def _build_context_from_programs(programs) -> str:
    if not programs:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    context = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ò–¢–ú–û:\n\n"
    
    for program in programs:
        context += f"–ü—Ä–æ–≥—Ä–∞–º–º–∞: {program.name}\n"
        context += f"–û–ø–∏—Å–∞–Ω–∏–µ: {program.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}\n"
        context += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤: {len(program.courses)}\n"
        context += f"–û–±—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã: {program.total_credits}\n"
        context += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {program.duration_semesters} —Å–µ–º–µ—Å—Ç—Ä–æ–≤\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ–≤—ã—Ö –∫—É—Ä—Å–∞—Ö
        key_courses = [course for course in program.courses if not course.is_elective][:5]
        if key_courses:
            context += "–û—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã:\n"
            for course in key_courses:
                context += f"- {course.name} ({course.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤)\n"
        
        context += "\n"
    
    return context 

def _generate_fallback_answer(question: str, programs: list) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fallback –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö"""
    question_lower = question.lower()
    
    # –°–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    keyword_responses = {
        '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ': """
üìö **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏:**

–î–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ò–¢–ú–û –ø–æ –ò–ò –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è:
‚Ä¢ –î–∏–ø–ª–æ–º –±–∞–∫–∞–ª–∞–≤—Ä–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ IT, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏–ª–∏ —Å–º–µ–∂–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
‚Ä¢ –£—Å–ø–µ—à–Ω–∞—è —Å–¥–∞—á–∞ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π
‚Ä¢ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º)

–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø—Ä–∏–µ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ò–¢–ú–û –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """,
        
        '—Å—Ç–æ–∏–º–æ—Å—Ç—å': """
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:**

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –≥–æ–¥.
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å:
‚Ä¢ –í –ø—Ä–∏–µ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ò–¢–ú–û
‚Ä¢ –ù–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
‚Ä¢ –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –≥–æ—Ä—è—á–µ–π –ª–∏–Ω–∏–∏
        """,
        
        '—Å—Ä–æ–∫': """
‚è∞ **–°—Ä–æ–∫–∏ –æ–±—É—á–µ–Ω–∏—è:**

–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –≤ –ò–¢–ú–û —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 2 –≥–æ–¥–∞ (4 —Å–µ–º–µ—Å—Ç—Ä–∞).
–ü—Ä–æ–≥—Ä–∞–º–º—ã –≤–∫–ª—é—á–∞—é—Ç:
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
‚Ä¢ –í—ã–±–æ—Ä–æ—á–Ω—ã–µ –∫—É—Ä—Å—ã
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É
‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–æ–π –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏
        """,
        
        '–∫—É—Ä—Å': f"""
üìñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:**

–í —Ä–∞–º–∫–∞—Ö –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ò–¢–ú–û –ø–æ –ò–ò –∏–∑—É—á–∞—é—Ç—Å—è:
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏
‚Ä¢ –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (NLP)
‚Ä¢ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ Data Science

{_get_programs_summary(programs)}
        """,
        
        '–ø—Ä–æ–≥—Ä–∞–º–º–∞': f"""
üéì **–ú–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**

{_get_programs_summary(programs)}

–ö–∞–∂–¥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏–º–µ–µ—Ç —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –Ω–∞–±–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.
        """
    }
    
    # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    for keyword, response in keyword_responses.items():
        if keyword in question_lower:
            return response.strip()
    
    # –ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–∞–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
    return f"""
ü§ñ **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**

{_get_programs_summary(programs)}

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø—Ä–∏–µ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ò–¢–ú–û
‚Ä¢ –ü–æ—Å–µ—Ç–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞  
‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º

‚ùì –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ.
    """.strip()

def _get_programs_summary(programs: list) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö"""
    if not programs:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    summary = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n"
    for program in programs:
        summary += f"‚Ä¢ **{program.name}** - {program.description or '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –ò–ò'}\n"
        summary += f"  ‚îî {len(program.courses)} –∫—É—Ä—Å–æ–≤, {program.total_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
    
    return summary 