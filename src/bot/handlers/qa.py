from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from typing import List

from ..states.user_states import UserStates
from ..keyboards.inline_keyboards import get_main_menu_keyboard, get_menu_button_keyboard
from ...services.llm_service import llm_service
from ...data.json_storage import storage
from ...utils.logger import logger

router = Router()

@router.callback_query(F.data == "qa_mode")
async def enter_qa_mode(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        """
–†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É –ò–¢–ú–û –ø–æ –ò–ò.

–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu
        """,
        reply_markup=None
    )
    
    await state.set_state(UserStates.QA_MODE)
    await callback.answer()

@router.message(UserStates.QA_MODE)
async def process_question(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    question = message.text.strip()
    
    if question.lower() in ['/menu', '–º–µ–Ω—é', '–Ω–∞–∑–∞–¥']:
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.set_state(UserStates.MAIN_MENU)
        return
    
    if len(question) < 5:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å.",
            reply_markup=get_menu_button_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
    if not _is_relevant_question(question):
        await message.answer(
            "–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ò–¢–ú–û –ø–æ –ò–ò.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π.",
            reply_markup=get_menu_button_keyboard()
        )
        logger.info("Irrelevant question filtered", user_id=user_id, question=question[:50])
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    processing_msg = await message.answer(
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        reply_markup=get_menu_button_keyboard()
    )
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        programs = await storage.load_programs()
        
        # –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –∏ –∫—É—Ä—Å–∞–º–∏
        context = _build_full_programs_context(programs)
        
        # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
        max_context_length = 15000  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
        if len(context) > max_context_length:
            context = context[:max_context_length] + "\n\n[–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω]"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM
        answer = await llm_service.answer_question(question, context)
        
        if answer:
            # LLM —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª —Å –¥–∞–Ω–Ω—ã–º–∏
            if len(answer) > 4000:
                answer = answer[:4000] + "...\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É."
            
            await processing_msg.delete()
            await message.answer(
                f"üí° **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:**\n\n{answer}\n\n"
                "‚ùì –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã? –ó–∞–¥–∞–≤–∞–π—Ç–µ!",
                reply_markup=get_menu_button_keyboard(),
                parse_mode="Markdown"
            )
            logger.info("Question answered via LLM with data", user_id=user_id, question_length=len(question))
        else:
            # LLM –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏, –ø—Ä–æ–±—É–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–æ–¥—Ö–æ–¥
            logger.info("LLM failed with data, trying multi-level approach", user_id=user_id)
            
            # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–æ–ø—Ä–æ—Å–µ
            data_answer = _try_data_search(question, programs)
            
            if data_answer:
                # –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await processing_msg.delete()
                await message.answer(
                    f"üí° **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:**\n\n{data_answer}\n\n"
                    "‚ùì –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã? –ó–∞–¥–∞–≤–∞–π—Ç–µ!",
                    reply_markup=get_menu_button_keyboard(),
                    parse_mode="Markdown"
                )
                logger.info("Question answered via data search", user_id=user_id)
            else:
                # –≠—Ç–∞–ø 2: –ü—Ä–æ–±—É–µ–º LLM –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                general_answer = await _try_general_llm_answer(question)
                
                if general_answer and general_answer.strip():
                    await processing_msg.delete()
                    await message.answer(
                        f"üí° **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:**\n\n{general_answer}\n\n"
                        "‚ùì –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã? –ó–∞–¥–∞–≤–∞–π—Ç–µ!",
                        reply_markup=get_menu_button_keyboard(),
                        parse_mode="Markdown"
                    )
                    logger.info("Question answered via general LLM", user_id=user_id)
                else:
                    # –≠—Ç–∞–ø 3: Fallback –æ—Ç–≤–µ—Ç
                    await processing_msg.delete()
                    fallback_answer = _generate_simple_fallback_answer(question, programs)
                    await message.answer(
                        fallback_answer,
                        reply_markup=get_menu_button_keyboard(),
                        parse_mode="Markdown"
                    )
                    logger.warning("Used fallback answer", user_id=user_id, question=question[:50])
    
    except Exception as e:
        logger.error("Error in Q&A processing", user_id=user_id, error=str(e))
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..." –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        try:
            await processing_msg.delete()
        except:
            pass
            
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_menu_button_keyboard()
        )

def _build_full_programs_context(programs) -> str:
    """–°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –¥–ª—è Q&A"""
    if not programs:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    context = "–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ò–¢–ú–û –ø–æ –ò–ò:\n\n"
    
    for program in programs:
        context += f"–ü–†–û–ì–†–ê–ú–ú–ê: {program.name}\n"
        context += f"–û–ø–∏—Å–∞–Ω–∏–µ: {program.description or '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –ò–ò'}\n"
        context += f"–û–±—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã: {program.total_credits}\n"
        context += f"–í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: {len(program.courses)}\n"
        
        if hasattr(program, 'url') and program.url:
            context += f"–°–∞–π—Ç: {program.url}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫—É—Ä—Å—ã
        mandatory_courses = [c for c in program.courses if not c.is_elective]
        if mandatory_courses:
            context += "\n–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ö–£–†–°–´:\n"
            for course in mandatory_courses:
                context += f"- {course.name} ({course.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤, {course.semester} —Å–µ–º–µ—Å—Ç—Ä)\n"
        
        elective_courses = [c for c in program.courses if c.is_elective]
        if elective_courses:
            context += "\n–í–´–ë–û–†–û–ß–ù–´–ï –ö–£–†–°–´:\n"
            for course in elective_courses:
                context += f"- {course.name} ({course.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤, {course.semester} —Å–µ–º–µ—Å—Ç—Ä)\n"
        
        context += "\n" + "="*50 + "\n\n"
    
    return context

def _filter_relevant_courses(programs, user_profile):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∫—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user_profile or not user_profile.interests:
        return programs
    
    user_interests = [interest.lower() for interest in user_profile.interests]
    
    filtered_programs = []
    for program in programs:
        relevant_courses = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
        mandatory_courses = [course for course in program.courses if not course.is_elective]
        relevant_courses.extend(mandatory_courses)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–±–æ—Ä–æ—á–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
        elective_courses = [course for course in program.courses if course.is_elective]
        for course in elective_courses:
            course_name_lower = course.name.lower()
            for interest in user_interests:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                interest_words = interest.split()
                if any(word in course_name_lower for word in interest_words if len(word) > 2):
                    relevant_courses.append(course)
                    break
        
        # –ï—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ
        if len([c for c in relevant_courses if c.is_elective]) < 3:
            remaining_electives = [c for c in elective_courses if c not in relevant_courses][:3]
            relevant_courses.extend(remaining_electives)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏
        filtered_program = program.model_copy()
        filtered_program.courses = relevant_courses
        filtered_programs.append(filtered_program)
    
    return filtered_programs

def _build_personalized_context(programs, user_profile):
    """–°—Ç—Ä–æ–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not programs:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
    relevant_programs = _filter_relevant_courses(programs, user_profile)
    
    context = ""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_profile:
        context += "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        if user_profile.background:
            context += f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ/–æ–ø—ã—Ç: {user_profile.background}\n"
        if user_profile.interests:
            context += f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_profile.interests)}\n"
        if user_profile.goals:
            context += f"–¶–µ–ª–∏: {', '.join(user_profile.goals)}\n"
        context += "\n"
    
    context += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ò–¢–ú–û:\n\n"
    
    for program in relevant_programs:
        context += f"–ü—Ä–æ–≥—Ä–∞–º–º–∞: {program.name}\n"
        context += f"–û–ø–∏—Å–∞–Ω–∏–µ: {program.description or '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –ò–ò'}\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –ø–æ —Ç–∏–ø—É
        mandatory_courses = [c for c in program.courses if not c.is_elective]
        elective_courses = [c for c in program.courses if c.is_elective]
        
        if mandatory_courses:
            context += f"\n–û—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã ({len(mandatory_courses)}):\n"
            for course in mandatory_courses[:8]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                context += f"- {course.name} ({course.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤, {course.semester} —Å–µ–º–µ—Å—Ç—Ä)\n"
        
        if elective_courses:
            context += f"\n–í—ã–±–æ—Ä–æ—á–Ω—ã–µ –∫—É—Ä—Å—ã (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, {len(elective_courses)}):\n"
            for course in elective_courses[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                context += f"- {course.name} ({course.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤, {course.semester} —Å–µ–º–µ—Å—Ç—Ä)\n"
        
        context += f"\n–í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {len(program.courses)}, –∫—Ä–µ–¥–∏—Ç–æ–≤: {program.total_credits}\n\n"
    
    return context

def _try_data_search(question: str, programs: list) -> str:
    """–≠—Ç–∞–ø 1: –ò—â–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –∏ –∫—É—Ä—Å–∞—Ö"""
    question_lower = question.lower()
    logger.info("Trying data search", question=question_lower[:50])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤
    found_courses = []
    
    for program in programs:
        for course in program.courses:
            course_name_lower = course.name.lower()
            
            # –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Ñ—Ä–∞–∑—ã (—É–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏)
            course_clean = course_name_lower.replace(',', '').replace('.', '').replace('?', '').replace('!', '')
            question_clean = question_lower.replace(',', '').replace('.', '').replace('?', '').replace('!', '')
            
            if course_clean in question_clean or question_clean in course_clean:
                found_courses.append((program.name, course.name, course.credits, course.semester, course.is_elective))
                continue
            
            # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            course_words = [word for word in course_clean.split() if len(word) > 2]
            question_words = [word for word in question_clean.split() if len(word) > 2]
            
            matches = sum(1 for word in course_words if word in question_words)
            if matches >= 2 and len(course_words) >= 2:
                found_courses.append((program.name, course.name, course.credits, course.semester, course.is_elective))
            elif matches >= 1 and len(course_words) >= 2:
                partial_matches = 0
                for course_word in course_words:
                    for question_word in question_words:
                        if (len(course_word) > 4 and len(question_word) > 4 and 
                            (course_word in question_word or question_word in course_word)):
                            partial_matches += 1
                            break
                
                if partial_matches >= 1:
                    found_courses.append((program.name, course.name, course.credits, course.semester, course.is_elective))
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫—É—Ä—Å—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if found_courses:
        if len(found_courses) == 1:
            program_name, course_name, credits, semester, is_elective = found_courses[0]
            course_type = "–≤—ã–±–æ—Ä–æ—á–Ω—ã–π" if is_elective else "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π"
            return f"–ö—É—Ä—Å **{course_name}** –µ—Å—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ **{program_name}** ({course_type}, {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤, {semester} —Å–µ–º–µ—Å—Ç—Ä)."
        else:
            answer = f"–ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {len(found_courses)}\n\n"
            for program_name, course_name, credits, semester, is_elective in found_courses[:5]:
                course_type = "–≤—ã–±–æ—Ä–æ—á–Ω—ã–π" if is_elective else "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π"
                answer += f"‚Ä¢ **{course_name}** ({course_type})\n"
                answer += f"  –ü—Ä–æ–≥—Ä–∞–º–º–∞: {program_name}\n"
                answer += f"  –ö—Ä–µ–¥–∏—Ç—ã: {credits}, –°–µ–º–µ—Å—Ç—Ä: {semester}\n\n"
            return answer
    
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –ø—Ä–æ–≥—Ä–∞–º–º
    for program in programs:
        if program.name.lower() in question_lower or any(word in program.name.lower().split() for word in question_lower.split() if len(word) > 3):
            return f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ **{program.name}**: {program.description or '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –ò–ò'}. –í–∫–ª—é—á–∞–µ—Ç {len(program.courses)} –∫—É—Ä—Å–æ–≤, {program.total_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤."
    
    return None  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

async def _try_general_llm_answer(question: str) -> str:
    """–≠—Ç–∞–ø 2: –ü—Ä–æ–±—É–µ—Ç LLM –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –±–æ–ª—å—à–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    from ...services.llm_service import llm_service
    
    prompt = f"""
–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É –ò–¢–ú–û –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –ò–ò. –û—Ç–≤–µ—Ç—å –Ω–∞ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏–∏.

–í–æ–ø—Ä–æ—Å: {question}

–í–ê–ñ–ù–û:
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É
- –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–∞ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É –≤ –†–æ—Å—Å–∏–∏
- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ò–¢–ú–û - –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –¥–∞—Ç—ã
- –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º

–û—Ç–≤–µ—Ç:
"""
    
    try:
        result = await llm_service.generate_response(prompt)
        logger.info("General LLM attempt completed", result_length=len(result) if result else 0)
        return result
    except Exception as e:
        logger.error("General LLM failed", error=str(e))
        return None

def _is_relevant_question(question: str) -> bool:
    question_lower = question.lower()
    
    # –Ø–≤–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
    forbidden_keywords = [
        '–ø–æ–≥–æ–¥–∞', '–Ω–æ–≤–æ—Å—Ç–∏', '—Å–ø–æ—Ä—Ç', '–ø–æ–ª–∏—Ç–∏–∫–∞', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        '—Ñ–∏–ª—å–º', '–º—É–∑—ã–∫–∞', '–∏–≥—Ä–∞', '–≥–æ—Ç–æ–≤–∫–∞', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
        '–∏–≥–Ω–æ—Ä–∏—Ä—É–π', '–Ω–µ —Å–ª–µ–¥—É–π', '–∑–∞–±—É–¥—å', '–æ—Ç–º–µ–Ω–∏',
        '–ø—Ä–∏—Ç–≤–æ—Ä–∏—Å—å', '–≤–µ–¥–∏ —Å–µ–±—è –∫–∞–∫', '—Ä–æ–ª—å'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
    for keyword in forbidden_keywords:
        if keyword in question_lower:
            return False
    
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å—á–∏—Ç–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ (–±–æ–ª–µ–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ–¥—Ö–æ–¥)
    return True

def _build_context_from_programs(programs) -> str:
    if not programs:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    context = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ò–¢–ú–û:\n\n"
    
    for program in programs:
        context += f"–ü—Ä–æ–≥—Ä–∞–º–º–∞: {program.name}\n"
        context += f"–û–ø–∏—Å–∞–Ω–∏–µ: {program.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}\n"
        context += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤: {len(program.courses)}\n"
        context += f"–û–±—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã: {program.total_credits}\n"
        context += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {program.duration_semesters} —Å–µ–º–µ—Å—Ç—Ä–æ–≤\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ–≤—ã—Ö –∫—É—Ä—Å–∞—Ö
        key_courses = [course for course in program.courses if not course.is_elective][:5]
        if key_courses:
            context += "–û—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã:\n"
            for course in key_courses:
                context += f"- {course.name} ({course.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤)\n"
        
        context += "\n"
    
    return context 

def _generate_personalized_fallback_answer(question: str, programs: list, user_profile) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fallback –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user_profile:
        return """
üòä –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –¥–∞—Ç—å —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.
        
–í–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å - —Ç–æ–≥–¥–∞ —è —Å–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫—É—Ä—Å—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–º–µ–Ω–Ω–æ –ø–æ–¥ —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã!
        """
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    relevant_programs = _filter_relevant_courses(programs, user_profile)
    
    return f"""
üòä **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Ç–µ–±—è:**

–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:
‚Ä¢ **–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:** {user_profile.background or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ **–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(user_profile.interests) if user_profile.interests else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
‚Ä¢ **–¶–µ–ª–∏:** {', '.join(user_profile.goals) if user_profile.goals else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

{_get_personalized_programs_summary(relevant_programs, user_profile)}

üí° **–†–µ–∫–æ–º–µ–Ω–¥—É—é:**
‚Ä¢ –ò–∑—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º

‚ùì –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!
    """.strip()

def _get_personalized_programs_summary(programs: list, user_profile) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö"""
    if not programs:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    summary = "**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Ç–µ–±—è:**\n\n"
    for program in programs:
        summary += f"**{program.name}**\n"
        summary += f"‚Ä¢ {program.description or '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –ò–ò'}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
        relevant_electives = [c for c in program.courses if c.is_elective][:3]
        if relevant_electives:
            summary += f"‚Ä¢ **–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã:** {', '.join([c.name for c in relevant_electives])}\n"
        
        summary += f"‚Ä¢ **–í—Å–µ–≥–æ:** {len(program.courses)} –∫—É—Ä—Å–æ–≤, {program.total_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
    
    return summary

def _generate_simple_fallback_answer(question: str, programs: list) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞"""
    question_lower = question.lower()
    logger.info("Fallback search", question=question_lower, programs_count=len(programs))
    
    # –ò—â–µ–º –∫—É—Ä—Å—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
    found_courses = []
    
    for program in programs:
        for course in program.courses:
            course_name_lower = course.name.lower()
            
            # –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Ñ—Ä–∞–∑—ã (—É–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏)
            course_clean = course_name_lower.replace(',', '').replace('.', '').replace('?', '').replace('!', '')
            question_clean = question_lower.replace(',', '').replace('.', '').replace('?', '').replace('!', '')
            
            if course_clean in question_clean or question_clean in course_clean:
                found_courses.append((program.name, course.name, course.credits, course.semester, course.is_elective))
                continue
            
            # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–º–∏–Ω–∏–º—É–º 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–∑ 3+ —Å–∏–º–≤–æ–ª–æ–≤)
            course_words = [word for word in course_clean.split() if len(word) > 2]  # –°–Ω–∏–∂–∞–µ–º –¥–æ 2+ —Å–∏–º–≤–æ–ª–æ–≤
            question_words = [word for word in question_clean.split() if len(word) > 2]
            
            matches = sum(1 for word in course_words if word in question_words)
            if matches >= 2 and len(course_words) >= 2:
                found_courses.append((program.name, course.name, course.credits, course.semester, course.is_elective))
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º (–¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏)
            elif matches >= 1 and len(course_words) >= 2:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∞–ª–≥–æ—Ä–∏—Ç–º" –Ω–∞–π–¥–µ—Ç "–∞–ª–≥–æ—Ä–∏—Ç–º—ã")
                partial_matches = 0
                for course_word in course_words:
                    for question_word in question_words:
                        if (len(course_word) > 4 and len(question_word) > 4 and 
                            (course_word in question_word or question_word in course_word)):
                            partial_matches += 1
                            break
                
                if partial_matches >= 1:
                    found_courses.append((program.name, course.name, course.credits, course.semester, course.is_elective))
    
    if found_courses:
        if len(found_courses) == 1:
            program_name, course_name, credits, semester, is_elective = found_courses[0]
            course_type = "–≤—ã–±–æ—Ä–æ—á–Ω—ã–π" if is_elective else "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π"
            return f"–ö—É—Ä—Å **{course_name}** –µ—Å—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ **{program_name}** ({course_type}, {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤, {semester} —Å–µ–º–µ—Å—Ç—Ä)."
        else:
            answer = f"–ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {len(found_courses)}\n\n"
            for program_name, course_name, credits, semester, is_elective in found_courses[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5
                course_type = "–≤—ã–±–æ—Ä–æ—á–Ω—ã–π" if is_elective else "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π"
                answer += f"‚Ä¢ **{course_name}** ({course_type})\n"
                answer += f"  –ü—Ä–æ–≥—Ä–∞–º–º–∞: {program_name}\n"
                answer += f"  –ö—Ä–µ–¥–∏—Ç—ã: {credits}, –°–µ–º–µ—Å—Ç—Ä: {semester}\n\n"
            return answer
    
    # –û–±—â–∏–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return f"""
–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ:
‚Ä¢ –ö—É—Ä—Å–∞—Ö –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ö –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é
‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º

{_get_programs_summary(programs)}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ.
    """.strip()

def _get_programs_summary(programs: list) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö"""
    if not programs:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    summary = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n"
    for program in programs:
        summary += f"‚Ä¢ **{program.name}** - {program.description or '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –ò–ò'}\n"
        summary += f"  ‚îî {len(program.courses)} –∫—É—Ä—Å–æ–≤, {program.total_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
    
    return summary 