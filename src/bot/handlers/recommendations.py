from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from datetime import datetime

from ..states.user_states import UserStates
from ..keyboards.inline_keyboards import (
    get_main_menu_keyboard, get_programs_keyboard, 
    get_export_keyboard, get_profile_setup_keyboard,
    get_menu_button_keyboard, get_program_actions_keyboard
)
from ...services.recommendation_service import recommendation_service
from ...data.json_storage import storage
from ...utils.logger import logger
import re

router = Router()

@router.callback_query(F.data == "get_recommendations")
async def get_recommendations(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    
    try:
        await callback.message.edit_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        
        user_profile = await storage.load_user_profile(user_id)
        
        if not user_profile:
            await callback.message.edit_text(
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.",
                reply_markup=get_profile_setup_keyboard()
            )
            await callback.answer()
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        recommendation = await recommendation_service.get_program_recommendations(user_profile)
        
        if not recommendation:
            # Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendation = _generate_fallback_recommendations(user_profile)
        
        await callback.message.edit_text(
            f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n{recommendation}",
            reply_markup=get_main_menu_keyboard()
        )
        
        await state.set_state(UserStates.GETTING_RECOMMENDATIONS)
        
    except Exception as e:
        logger.error("Failed to get recommendations", user_id=user_id, error=str(e))
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

def _generate_fallback_recommendations(user_profile) -> str:
    """Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–≥–¥–∞ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"""
    
    background = user_profile.background.lower() if user_profile.background else ""
    interests = [interest.lower() for interest in user_profile.interests]
    goals = [goal.lower() for goal in user_profile.goals]
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    has_tech_background = any(keyword in background for keyword in ['–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫', '–ø—Ä–æ–≥—Ä–∞–º–º', 'it', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫'])
    interested_in_ml = any(keyword in interest for interest in interests for keyword in ['–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–¥–∞–Ω–Ω—ã–µ', 'ml'])
    interested_in_products = any(keyword in interest for interest in interests for keyword in ['–ø—Ä–æ–¥—É–∫—Ç', '—Å—Ç–∞—Ä—Ç–∞–ø', '–±–∏–∑–Ω–µ—Å'])
    wants_career = any(keyword in goal for goal in goals for keyword in ['–∫–∞—Ä—å–µ—Ä', 'it'])
    
    recommendations = f"""
üéØ *–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò*

üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user_profile.background or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_profile.interests) if user_profile.interests else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
‚Ä¢ –¶–µ–ª–∏: {', '.join(user_profile.goals) if user_profile.goals else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

"""
    
    if has_tech_background and interested_in_ml:
        recommendations += """
üéØ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê:*
‚úÖ **–ò–°–ö–£–°–°–¢–í–ï–ù–ù–´–ô –ò–ù–¢–ï–õ–õ–ï–ö–¢**

üîç *–ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç:*
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é
‚Ä¢ –†–∞–∑–≤–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –î–∞–µ—Ç –≥–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è –≤ –ò–ò-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö

üìö *–ö–ª—é—á–µ–≤—ã–µ –∫—É—Ä—Å—ã:*
‚Ä¢ –û—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (6 –∫—Ä.)
‚Ä¢ –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ (6 –∫—Ä.)
‚Ä¢ –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ (5 –∫—Ä.)
‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –≤ –ò–ò (4 –∫—Ä.)

üíº *–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏:*
‚Ä¢ ML Engineer: 200-350K ‚ÇΩ
‚Ä¢ Data Scientist: 180-300K ‚ÇΩ
‚Ä¢ AI Researcher: 220-400K ‚ÇΩ

"""
    
    if interested_in_products or not has_tech_background:
        recommendations += """
üéØ *–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê:*
‚ö° **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ò-–ü–†–û–î–£–ö–¢–ê–ú–ò**

üîç *–ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç:*
‚Ä¢ –§–æ–∫—É—Å –Ω–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ò–ò
‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ IT
‚Ä¢ –†–∞–∑–≤–∏–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ

üìö *–ö–ª—é—á–µ–≤—ã–µ –∫—É—Ä—Å—ã:*
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (6 –∫—Ä.)
‚Ä¢ Data Science –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (6 –∫—Ä.)
‚Ä¢ UX/UI –¥–ª—è AI-–ø—Ä–æ–¥—É–∫—Ç–æ–≤ (4 –∫—Ä.)
‚Ä¢ MLOps –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (5 –∫—Ä.)

üíº *–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏:*
‚Ä¢ AI Product Manager: 250-450K ‚ÇΩ
‚Ä¢ AI Product Owner: 200-350K ‚ÇΩ
‚Ä¢ AI Consultant: 180-300K ‚ÇΩ

"""
    
    recommendations += """
üöÄ *–°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:*
1Ô∏è‚É£ –ò–∑—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º ‚Üí "–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"
2Ô∏è‚É£ –°—Ä–∞–≤–Ω–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–µ–∂–¥—É —Å–æ–±–æ–π
3Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö
4Ô∏è‚É£ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–µ–∂–∏–º–µ Q&A

üí° *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –≤ IT-–∫–æ–º–ø–∞–Ω–∏—è—Ö
‚Ä¢ –ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –ú–µ–Ω—Ç–æ—Ä—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞–ø–∞

üìû *–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è?*
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–µ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ò–¢–ú–û –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.
"""
    
    return recommendations

@router.callback_query(F.data == "compare_programs")
async def compare_programs(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–°—Ä–∞–≤–Ω–∏–≤–∞—é –ø—Ä–æ–≥—Ä–∞–º–º—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    try:
        comparison = await recommendation_service.compare_programs()
        
        if comparison:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if len(comparison) > 4000:
                parts = [comparison[i:i+4000] for i in range(0, len(comparison), 4000)]
                
                for i, part in enumerate(parts):
                    if i == 0:
                        await callback.message.edit_text(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º (—á–∞—Å—Ç—å {i+1}):\n\n{part}")
                    else:
                        await callback.message.answer(f"–ß–∞—Å—Ç—å {i+1}:\n\n{part}")
                
                await callback.message.answer(
                    "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
                    reply_markup=get_main_menu_keyboard()
                )
            else:
                await callback.message.edit_text(
                    f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º:\n\n{comparison}",
                    reply_markup=get_main_menu_keyboard()
                )
        else:
            await callback.message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º.",
                reply_markup=get_main_menu_keyboard()
            )
        
        await state.set_state(UserStates.PROGRAM_COMPARISON)
        
    except Exception as e:
        logger.error("Failed to compare programs", error=str(e))
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data == "select_program")
async def select_program(callback: CallbackQuery, state: FSMContext):
    try:
        programs = await storage.load_programs()
        
        if not programs:
            await callback.message.edit_text(
                "–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=get_programs_keyboard(programs)
        )
        
        await state.set_state(UserStates.PROGRAM_SELECTION)
        
    except Exception as e:
        logger.error("Failed to load programs", error=str(e))
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

def _escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown"""
    if not text:
        return text
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    escape_chars = ['*', '_', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    
    return text

def _format_description(description: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã"""
    if not description:
        return "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    formatted = re.sub(r'\n\s+', ' ', description.strip())
    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
    formatted = re.sub(r'\s+', ' ', formatted)
    
    return formatted

@router.callback_query(F.data.startswith("program_"))
async def show_program_details(callback: CallbackQuery, state: FSMContext):
    program_id = callback.data.replace("program_", "")
    
    try:
        programs = await storage.load_programs()
        program = next((p for p in programs if p.id == program_id), None)
        
        if not program:
            await callback.message.edit_text(
                "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—É—Ä—Å–æ–≤
        mandatory_courses = [c for c in program.courses if not c.is_elective]
        elective_courses = [c for c in program.courses if c.is_elective]
        semesters = list(set(c.semester for c in program.courses))
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
        program_name = _escape_markdown(program.name)
        program_desc = _format_description(program.description)
        program_url = program.url
        
        program_text = f"""
üéì **{program_name}**

üìã **–û–ø–∏—Å–∞–Ω–∏–µ:**
{program_desc}

üìä **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**
‚Ä¢ –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: {len(program.courses)}
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö: {len(mandatory_courses)} –∫—É—Ä—Å–æ–≤  
‚Ä¢ –í—ã–±–æ—Ä–æ—á–Ω—ã—Ö: {len(elective_courses)} –∫—É—Ä—Å–∞
‚Ä¢ –û–±—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤: {program.total_credits}
‚Ä¢ –°–µ–º–µ—Å—Ç—Ä–æ–≤: {max(semesters) if semesters else 4}

üåê **–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:** [–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç]({program_url})
        """
        
        await callback.message.edit_text(
            program_text.strip(),
            reply_markup=get_program_actions_keyboard(program_id),
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        
        await state.set_state(UserStates.VIEWING_PROGRAM)
        
    except Exception as e:
        logger.error("Failed to show program details", program_id=program_id, error=str(e))
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫—É—Ä—Å–∞–º —É–¥–∞–ª–µ–Ω - –∫—É—Ä—Å—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ UI

@router.callback_query(F.data.startswith("download_program_"))
async def download_program(callback: CallbackQuery, state: FSMContext):
    try:
        program_id = callback.data.replace("download_program_", "")
        
        programs = await storage.load_programs()
        program = next((p for p in programs if p.id == program_id), None)
        
        if not program:
            await callback.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è PDF —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ program_id
        if program_id == "ai":
            pdf_filename = "10033-abit-3.pdf"
        elif program_id == "ai_product":
            pdf_filename = "pdf.pdf"
        else:
            pdf_filename = "pdf.pdf"  # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º
        
        from ...utils.config import settings
        pdf_path = settings.DATA_DIR / "files" / pdf_filename
        
        if pdf_path.exists():
            document = FSInputFile(pdf_path, filename=pdf_filename)
            await callback.message.answer_document(
                document=document,
                caption=f"üìÑ –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–º—ã: {program.name}",
                reply_markup=get_menu_button_keyboard()
            )
        else:
            await callback.message.answer(
                "PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=get_menu_button_keyboard()
            )
        
    except Exception as e:
        logger.error("Failed to download program", program_id=program_id, error=str(e))
        await callback.message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_menu_button_keyboard()
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π –∫—É—Ä—Å–æ–≤ —É–¥–∞–ª–µ–Ω - –∫—É—Ä—Å—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ UI

@router.callback_query(F.data == "export_courses")
async def export_courses(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=get_export_keyboard()
    )
    await state.set_state(UserStates.EXPORT_FORMAT_SELECTION)
    await callback.answer()

@router.callback_query(F.data == "export_text")
async def export_as_text(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    
    try:
        user_profile = await storage.load_user_profile(user_id)
        if not user_profile:
            await callback.message.edit_text(
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = f"""
–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò–¢–ú–û

–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user_profile.background or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_profile.interests) if user_profile.interests else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
- –¶–µ–ª–∏: {', '.join(user_profile.goals) if user_profile.goals else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        from aiogram.types import BufferedInputFile
        file_bytes = report.encode('utf-8')
        file = BufferedInputFile(file_bytes, filename=f"itmo_recommendations_{user_id}.txt")
        
        await callback.message.answer_document(
            document=file,
            caption="üìÑ –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            reply_markup=get_menu_button_keyboard()
        )
        
        await callback.message.edit_text(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!",
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error("Failed to export recommendations", user_id=user_id, error=str(e))
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data == "export_message")
async def export_as_message(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    
    try:
        user_profile = await storage.load_user_profile(user_id)
        if not user_profile:
            await callback.message.edit_text(
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        recommendation = await recommendation_service.get_program_recommendations(user_profile)
        
        if recommendation:
            await callback.message.answer(
                f"üìã **–í–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n\n{recommendation}",
                reply_markup=get_menu_button_keyboard(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
                reply_markup=get_menu_button_keyboard()
            )
        
        await callback.message.edit_text(
            "–ì–æ—Ç–æ–≤–æ!",
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error("Failed to export as message", user_id=user_id, error=str(e))
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer() 