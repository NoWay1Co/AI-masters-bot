from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime

from ..states.user_states import UserStates
from ..keyboards.inline_keyboards import (
    get_main_menu_keyboard, get_programs_keyboard, 
    get_courses_keyboard, get_export_keyboard, get_profile_setup_keyboard
)
from ...services.recommendation_service import recommendation_service
from ...data.json_storage import storage
from ...utils.logger import logger

router = Router()

@router.callback_query(F.data == "get_recommendations")
async def get_recommendations(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    
    try:
        await callback.message.edit_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        
        user_profile = await storage.load_user_profile(user_id)
        
        if not user_profile:
            await callback.message.edit_text(
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.",
                reply_markup=get_profile_setup_keyboard()
            )
            await callback.answer()
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        recommendation = await recommendation_service.get_program_recommendations(user_profile)
        
        if not recommendation:
            # Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendation = _generate_fallback_recommendations(user_profile)
        
        await callback.message.edit_text(
            f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n{recommendation}",
            reply_markup=get_main_menu_keyboard()
        )
        
        await state.set_state(UserStates.GETTING_RECOMMENDATIONS)
        
    except Exception as e:
        logger.error("Failed to get recommendations", user_id=user_id, error=str(e))
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

def _generate_fallback_recommendations(user_profile) -> str:
    """Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–≥–¥–∞ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"""
    
    background = user_profile.background.lower() if user_profile.background else ""
    interests = [interest.lower() for interest in user_profile.interests]
    goals = [goal.lower() for goal in user_profile.goals]
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    has_tech_background = any(keyword in background for keyword in ['–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫', '–ø—Ä–æ–≥—Ä–∞–º–º', 'it', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫'])
    interested_in_ml = any(keyword in interest for interest in interests for keyword in ['–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–¥–∞–Ω–Ω—ã–µ', 'ml'])
    interested_in_products = any(keyword in interest for interest in interests for keyword in ['–ø—Ä–æ–¥—É–∫—Ç', '—Å—Ç–∞—Ä—Ç–∞–ø', '–±–∏–∑–Ω–µ—Å'])
    wants_career = any(keyword in goal for goal in goals for keyword in ['–∫–∞—Ä—å–µ—Ä', 'it'])
    
    recommendations = "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:\n\n"
    
    if has_tech_background and interested_in_ml:
        recommendations += "‚úÖ **–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç** - –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–≥—Ä–∞—É–Ω–¥–∞\n"
        recommendations += "‚Ä¢ –ö—É—Ä—Å—ã: –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ\n"
        recommendations += "‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤ ML Engineer, Data Scientist\n\n"
    
    if interested_in_products or not has_tech_background:
        recommendations += "‚úÖ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏** - –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –±—ã—Ç—å –Ω–∞ —Å—Ç—ã–∫–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –±–∏–∑–Ω–µ—Å–∞\n"
        recommendations += "‚Ä¢ –ö—É—Ä—Å—ã: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏, Data Science –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, UX/UI\n"
        recommendations += "‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤ Product Manager, AI Product Owner\n\n"
    
    if wants_career:
        recommendations += "üíº **–ö–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        recommendations += "‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç–∞ Middle+ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: 170-300 —Ç—ã—Å. —Ä—É–±–ª–µ–π\n"
        recommendations += "‚Ä¢ –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å –Ω–∞ AI-—ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ\n\n"
    
    recommendations += "üìö **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏:**\n"
    recommendations += "1. –ò–∑—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º –≤ —Ä–∞–∑–¥–µ–ª–µ '–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É'\n"
    recommendations += "2. –°—Ä–∞–≤–Ω–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–µ–∂–¥—É —Å–æ–±–æ–π\n"
    recommendations += "3. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–µ–∂–∏–º–µ Q&A\n"
    
    return recommendations

@router.callback_query(F.data == "compare_programs")
async def compare_programs(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–°—Ä–∞–≤–Ω–∏–≤–∞—é –ø—Ä–æ–≥—Ä–∞–º–º—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    try:
        comparison = await recommendation_service.compare_programs()
        
        if comparison:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if len(comparison) > 4000:
                parts = [comparison[i:i+4000] for i in range(0, len(comparison), 4000)]
                
                for i, part in enumerate(parts):
                    if i == 0:
                        await callback.message.edit_text(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º (—á–∞—Å—Ç—å {i+1}):\n\n{part}")
                    else:
                        await callback.message.answer(f"–ß–∞—Å—Ç—å {i+1}:\n\n{part}")
                
                await callback.message.answer(
                    "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
                    reply_markup=get_main_menu_keyboard()
                )
            else:
                await callback.message.edit_text(
                    f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º:\n\n{comparison}",
                    reply_markup=get_main_menu_keyboard()
                )
        else:
            await callback.message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º.",
                reply_markup=get_main_menu_keyboard()
            )
        
        await state.set_state(UserStates.PROGRAM_COMPARISON)
        
    except Exception as e:
        logger.error("Failed to compare programs", error=str(e))
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data == "select_program")
async def select_program(callback: CallbackQuery, state: FSMContext):
    try:
        programs = await storage.load_programs()
        
        if not programs:
            await callback.message.edit_text(
                "–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=get_programs_keyboard(programs)
        )
        
        await state.set_state(UserStates.PROGRAM_SELECTION)
        
    except Exception as e:
        logger.error("Failed to load programs", error=str(e))
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("program_"))
async def show_program_details(callback: CallbackQuery, state: FSMContext):
    program_id = callback.data.replace("program_", "")
    
    try:
        programs = await storage.load_programs()
        program = next((p for p in programs if p.id == program_id), None)
        
        if not program:
            await callback.message.edit_text(
                "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        program_text = f"""
{program.name}

–û–ø–∏—Å–∞–Ω–∏–µ: {program.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}

–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: {len(program.courses)}
- –í—ã–±–æ—Ä–æ—á–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: {len([c for c in program.courses if c.is_elective])}
- –û–±—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã: {program.total_credits}
- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {program.duration_semesters} —Å–µ–º–µ—Å—Ç—Ä–æ–≤

–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è?
        """
        
        from ...data.models import ProgramType
        program_type = ProgramType(program_id)
        
        user_id = str(callback.from_user.id)
        user_profile = await storage.load_user_profile(user_id)
        
        if user_profile:
            recommended_courses = await recommendation_service.get_course_recommendations(
                user_profile, program_type
            )
            
            if recommended_courses:
                await callback.message.edit_text(
                    program_text,
                    reply_markup=get_courses_keyboard(recommended_courses)
                )
            else:
                await callback.message.edit_text(
                    program_text + "\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
                    reply_markup=get_main_menu_keyboard()
                )
        else:
            await callback.message.edit_text(
                program_text + "\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫—É—Ä—Å–æ–≤ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.",
                reply_markup=get_main_menu_keyboard()
            )
        
        await state.set_state(UserStates.VIEWING_COURSES)
        
    except Exception as e:
        logger.error("Failed to show program details", program_id=program_id, error=str(e))
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("course_"))
async def show_course_details(callback: CallbackQuery):
    course_id = callback.data.replace("course_", "")
    
    try:
        programs = await storage.load_programs()
        course = None
        
        for program in programs:
            course = next((c for c in program.courses if c.id == course_id), None)
            if course:
                break
        
        if not course:
            await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        course_text = f"""
{course.name}

–ö—Ä–µ–¥–∏—Ç—ã: {course.credits}
–°–µ–º–µ—Å—Ç—Ä: {course.semester}
–¢–∏–ø: {"–í—ã–±–æ—Ä–æ—á–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞" if course.is_elective else "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"}

{course.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}

–ü—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {', '.join(course.prerequisites) if course.prerequisites else '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}
        """
        
        await callback.message.answer(course_text)
        
    except Exception as e:
        logger.error("Failed to show course details", course_id=course_id, error=str(e))
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ.")
    
    await callback.answer()

@router.callback_query(F.data == "export_courses")
async def export_courses(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=get_export_keyboard()
    )
    await state.set_state(UserStates.EXPORT_FORMAT_SELECTION)
    await callback.answer()

@router.callback_query(F.data == "export_text")
async def export_as_text(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    
    try:
        user_profile = await storage.load_user_profile(user_id)
        if not user_profile:
            await callback.message.edit_text(
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = f"""
–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò–¢–ú–û

–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user_profile.background or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_profile.interests) if user_profile.interests else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
- –¶–µ–ª–∏: {', '.join(user_profile.goals) if user_profile.goals else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        from aiogram.types import BufferedInputFile
        file_bytes = report.encode('utf-8')
        file = BufferedInputFile(file_bytes, filename=f"itmo_recommendations_{user_id}.txt")
        
        await callback.message.answer_document(
            document=file,
            caption="–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        )
        
        await callback.message.edit_text(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!",
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error("Failed to export recommendations", user_id=user_id, error=str(e))
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data == "export_message")
async def export_as_message(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    
    try:
        user_profile = await storage.load_user_profile(user_id)
        if not user_profile:
            await callback.message.edit_text(
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        recommendation = await recommendation_service.get_program_recommendations(user_profile)
        
        if recommendation:
            await callback.message.answer(f"–í–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n{recommendation}")
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
        
        await callback.message.edit_text(
            "–ì–æ—Ç–æ–≤–æ!",
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error("Failed to export as message", user_id=user_id, error=str(e))
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer() 