from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from ...services.recommendation_service import recommendation_service
from ...data.models import ProgramType
from ...utils.logger import logger
from ..keyboards.inline_keyboards import create_program_selection_keyboard, create_back_keyboard

router = Router()

@router.callback_query(F.data == "view_programs")
async def view_programs_handler(callback: CallbackQuery):
    await callback.answer()
    
    await callback.message.edit_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ò–¢–ú–û –ø–æ –ò–ò:",
        reply_markup=create_program_selection_keyboard()
    )

@router.callback_query(F.data.startswith("program_"))
async def program_details_handler(callback: CallbackQuery):
    await callback.answer()
    
    program_type_str = callback.data.split("_")[1]
    program_type = ProgramType(program_type_str)
    
    await callback.message.edit_text(
        "–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ...",
        reply_markup=None
    )
    
    try:
        programs = await recommendation_service._get_programs()
        target_program = next((p for p in programs if p.type == program_type), None)
        
        if not target_program:
            await callback.message.edit_text(
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                reply_markup=create_back_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        courses_count = len(target_program.courses)
        elective_count = len([c for c in target_program.courses if c.is_elective])
        required_count = courses_count - elective_count
        
        program_info = f"""
**{target_program.name}**

üìã **–û–ø–∏—Å–∞–Ω–∏–µ:**
{target_program.description or '–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ'}

üìä **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {target_program.duration_semesters} —Å–µ–º–µ—Å—Ç—Ä–∞
‚Ä¢ –û–±—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã: {target_program.total_credits}
‚Ä¢ –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: {courses_count}
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö: {required_count}
‚Ä¢ –í—ã–±–æ—Ä–æ—á–Ω—ã—Ö: {elective_count}

üîó **–ü–æ–¥—Ä–æ–±–Ω–µ–µ:** {target_program.url}
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∫—É—Ä—Å–æ–≤
        if target_program.courses:
            program_info += "\n\nüìö **–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—É—Ä—Å—ã:**\n"
            for course in target_program.courses[:5]:
                program_info += f"‚Ä¢ {course.name} ({course.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤)\n"
            
            if len(target_program.courses) > 5:
                program_info += f"‚Ä¢ ... –∏ –µ—â–µ {len(target_program.courses) - 5} –∫—É—Ä—Å–æ–≤\n"
        
        await callback.message.edit_text(
            program_info,
            reply_markup=create_back_keyboard(),
            parse_mode="Markdown"
        )
        
        logger.info("Program details viewed", 
                   user_id=callback.from_user.id, 
                   program_type=program_type.value)
        
    except Exception as e:
        logger.error("Failed to load program details", 
                    user_id=callback.from_user.id, 
                    program_type=program_type_str,
                    error=str(e))
        
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_back_keyboard()
        ) 